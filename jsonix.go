// Generated by ChatGPT

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
)

type Jsonix struct {
	db string
}

func NewJsonix(db string) *Jsonix {
	return &Jsonix{db: db}
}

func (j *Jsonix) persist(o interface{}) error {
	jsonStr, err := json.Marshal(o)
	if err != nil {
		return err
	}

	file, err := os.OpenFile(j.db, os.O_WRONLY|os.O_APPEND|os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer file.Close()

	_, err = file.Write(append(jsonStr, '\n'))
	return err
}

func (j *Jsonix) query(q func(map[string]interface{}) bool) ([]map[string]interface{}, error) {
	var objects []map[string]interface{}

	fileBytes, err := ioutil.ReadFile(j.db)
	if err != nil {
		return nil, err
	}

	lines := bytes.Split(fileBytes, []byte("\n"))
	for _, line := range lines {
		if len(line) == 0 {
			continue
		}

		var o map[string]interface{}
		err := json.Unmarshal(line, &o)
		if err != nil {
			return nil, err
		}

		if q(o) {
			objects = append(objects, o)
		}
	}

	return objects, nil
}

func main() {
	db := NewJsonix(filepath.Join(os.Getenv("HOME"), "JSONIX-Example.jsonl"))

	err := db.persist(map[string]interface{}{
		"name": "P.J. Finlay",
		"age":  24,
	})
	if err != nil {
		fmt.Println("Error persisting object:", err)
		return
	}

	results, err := db.query(func(x map[string]interface{}) bool {
		return x["age"].(float64) == 24
	})
	if err != nil {
		fmt.Println("Error querying objects:", err)
		return
	}

	fmt.Println(results)
}
